/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { AddonService } from "../addon.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AddonCreateInput } from "./AddonCreateInput";
import { Addon } from "./Addon";
import { AddonFindManyArgs } from "./AddonFindManyArgs";
import { AddonWhereUniqueInput } from "./AddonWhereUniqueInput";
import { AddonUpdateInput } from "./AddonUpdateInput";
import { OrderItemFindManyArgs } from "../../orderItem/base/OrderItemFindManyArgs";
import { OrderItem } from "../../orderItem/base/OrderItem";
import { OrderItemWhereUniqueInput } from "../../orderItem/base/OrderItemWhereUniqueInput";
import { PriceFindManyArgs } from "../../price/base/PriceFindManyArgs";
import { Price } from "../../price/base/Price";
import { PriceWhereUniqueInput } from "../../price/base/PriceWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class AddonControllerBase {
  constructor(
    protected readonly service: AddonService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Addon })
  @nestAccessControl.UseRoles({
    resource: "Addon",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createAddon(@common.Body() data: AddonCreateInput): Promise<Addon> {
    return await this.service.createAddon({
      data: {
        ...data,

        product: data.product
          ? {
              connect: data.product,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,

        product: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Addon] })
  @ApiNestedQuery(AddonFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Addon",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async addons(@common.Req() request: Request): Promise<Addon[]> {
    const args = plainToClass(AddonFindManyArgs, request.query);
    return this.service.addons({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,

        product: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Addon })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Addon",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async addon(
    @common.Param() params: AddonWhereUniqueInput
  ): Promise<Addon | null> {
    const result = await this.service.addon({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,

        product: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Addon })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Addon",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateAddon(
    @common.Param() params: AddonWhereUniqueInput,
    @common.Body() data: AddonUpdateInput
  ): Promise<Addon | null> {
    try {
      return await this.service.updateAddon({
        where: params,
        data: {
          ...data,

          product: data.product
            ? {
                connect: data.product,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,

          product: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Addon })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Addon",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteAddon(
    @common.Param() params: AddonWhereUniqueInput
  ): Promise<Addon | null> {
    try {
      return await this.service.deleteAddon({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,

          product: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/orderItems")
  @ApiNestedQuery(OrderItemFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "OrderItem",
    action: "read",
    possession: "any",
  })
  async findOrderItems(
    @common.Req() request: Request,
    @common.Param() params: AddonWhereUniqueInput
  ): Promise<OrderItem[]> {
    const query = plainToClass(OrderItemFindManyArgs, request.query);
    const results = await this.service.findOrderItems(params.id, {
      ...query,
      select: {
        addon: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        order: {
          select: {
            id: true,
          },
        },

        price: {
          select: {
            id: true,
          },
        },

        product: {
          select: {
            id: true,
          },
        },

        quantity: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/orderItems")
  @nestAccessControl.UseRoles({
    resource: "Addon",
    action: "update",
    possession: "any",
  })
  async connectOrderItems(
    @common.Param() params: AddonWhereUniqueInput,
    @common.Body() body: OrderItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orderItems: {
        connect: body,
      },
    };
    await this.service.updateAddon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/orderItems")
  @nestAccessControl.UseRoles({
    resource: "Addon",
    action: "update",
    possession: "any",
  })
  async updateOrderItems(
    @common.Param() params: AddonWhereUniqueInput,
    @common.Body() body: OrderItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orderItems: {
        set: body,
      },
    };
    await this.service.updateAddon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/orderItems")
  @nestAccessControl.UseRoles({
    resource: "Addon",
    action: "update",
    possession: "any",
  })
  async disconnectOrderItems(
    @common.Param() params: AddonWhereUniqueInput,
    @common.Body() body: OrderItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orderItems: {
        disconnect: body,
      },
    };
    await this.service.updateAddon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/prices")
  @ApiNestedQuery(PriceFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Price",
    action: "read",
    possession: "any",
  })
  async findPrices(
    @common.Req() request: Request,
    @common.Param() params: AddonWhereUniqueInput
  ): Promise<Price[]> {
    const query = plainToClass(PriceFindManyArgs, request.query);
    const results = await this.service.findPrices(params.id, {
      ...query,
      select: {
        addon: {
          select: {
            id: true,
          },
        },

        addonRelation: true,
        amount: true,
        createdAt: true,
        currency: true,
        currencyType: true,
        id: true,

        product: {
          select: {
            id: true,
          },
        },

        productRelation: true,
        relatesToAddon: true,
        relatesToProduct: true,
        updatedAt: true,
        value: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/prices")
  @nestAccessControl.UseRoles({
    resource: "Addon",
    action: "update",
    possession: "any",
  })
  async connectPrices(
    @common.Param() params: AddonWhereUniqueInput,
    @common.Body() body: PriceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      prices: {
        connect: body,
      },
    };
    await this.service.updateAddon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/prices")
  @nestAccessControl.UseRoles({
    resource: "Addon",
    action: "update",
    possession: "any",
  })
  async updatePrices(
    @common.Param() params: AddonWhereUniqueInput,
    @common.Body() body: PriceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      prices: {
        set: body,
      },
    };
    await this.service.updateAddon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/prices")
  @nestAccessControl.UseRoles({
    resource: "Addon",
    action: "update",
    possession: "any",
  })
  async disconnectPrices(
    @common.Param() params: AddonWhereUniqueInput,
    @common.Body() body: PriceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      prices: {
        disconnect: body,
      },
    };
    await this.service.updateAddon({
      where: params,
      data,
      select: { id: true },
    });
  }
}
