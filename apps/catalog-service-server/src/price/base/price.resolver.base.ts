/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Price } from "./Price";
import { PriceCountArgs } from "./PriceCountArgs";
import { PriceFindManyArgs } from "./PriceFindManyArgs";
import { PriceFindUniqueArgs } from "./PriceFindUniqueArgs";
import { CreatePriceArgs } from "./CreatePriceArgs";
import { UpdatePriceArgs } from "./UpdatePriceArgs";
import { DeletePriceArgs } from "./DeletePriceArgs";
import { OrderItemFindManyArgs } from "../../orderItem/base/OrderItemFindManyArgs";
import { OrderItem } from "../../orderItem/base/OrderItem";
import { Addon } from "../../addon/base/Addon";
import { Product } from "../../product/base/Product";
import { PriceService } from "../price.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Price)
export class PriceResolverBase {
  constructor(
    protected readonly service: PriceService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Price",
    action: "read",
    possession: "any",
  })
  async _pricesMeta(
    @graphql.Args() args: PriceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Price])
  @nestAccessControl.UseRoles({
    resource: "Price",
    action: "read",
    possession: "any",
  })
  async prices(@graphql.Args() args: PriceFindManyArgs): Promise<Price[]> {
    return this.service.prices(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Price, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Price",
    action: "read",
    possession: "own",
  })
  async price(
    @graphql.Args() args: PriceFindUniqueArgs
  ): Promise<Price | null> {
    const result = await this.service.price(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Price)
  @nestAccessControl.UseRoles({
    resource: "Price",
    action: "create",
    possession: "any",
  })
  async createPrice(@graphql.Args() args: CreatePriceArgs): Promise<Price> {
    return await this.service.createPrice({
      ...args,
      data: {
        ...args.data,

        addon: args.data.addon
          ? {
              connect: args.data.addon,
            }
          : undefined,

        product: args.data.product
          ? {
              connect: args.data.product,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Price)
  @nestAccessControl.UseRoles({
    resource: "Price",
    action: "update",
    possession: "any",
  })
  async updatePrice(
    @graphql.Args() args: UpdatePriceArgs
  ): Promise<Price | null> {
    try {
      return await this.service.updatePrice({
        ...args,
        data: {
          ...args.data,

          addon: args.data.addon
            ? {
                connect: args.data.addon,
              }
            : undefined,

          product: args.data.product
            ? {
                connect: args.data.product,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Price)
  @nestAccessControl.UseRoles({
    resource: "Price",
    action: "delete",
    possession: "any",
  })
  async deletePrice(
    @graphql.Args() args: DeletePriceArgs
  ): Promise<Price | null> {
    try {
      return await this.service.deletePrice(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [OrderItem], { name: "orderItems" })
  @nestAccessControl.UseRoles({
    resource: "OrderItem",
    action: "read",
    possession: "any",
  })
  async findOrderItems(
    @graphql.Parent() parent: Price,
    @graphql.Args() args: OrderItemFindManyArgs
  ): Promise<OrderItem[]> {
    const results = await this.service.findOrderItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Addon, {
    nullable: true,
    name: "addon",
  })
  @nestAccessControl.UseRoles({
    resource: "Addon",
    action: "read",
    possession: "any",
  })
  async getAddon(@graphql.Parent() parent: Price): Promise<Addon | null> {
    const result = await this.service.getAddon(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Product, {
    nullable: true,
    name: "product",
  })
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "read",
    possession: "any",
  })
  async getProduct(@graphql.Parent() parent: Price): Promise<Product | null> {
    const result = await this.service.getProduct(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
